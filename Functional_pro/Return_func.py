def lazy_sum(*args):
    def sum():
        ax = 0
        for i in args:
            ax = ax + i
        return ax
    return  sum()

# 我们在函数lazy_sum中又定义了函数sum，并且，内部函数sum可以引用外部函数lazy_sum的参数和局部变量，当lazy_sum返回函数sum时，
# 相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。

#返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。

# 请再注意一点，当我们调用lazy_sum()时，每次调用都会返回一个新的函数，即使传入相同的参数：
#
# >>> f1 = lazy_sum(1, 3, 5, 7, 9)
# >>> f2 = lazy_sum(1, 3, 5, 7, 9)
# >>> f1==f2
# False
# f1()和f2()的调用结果互不影响。

def count():
    fs = []
    for i in range(1,5):
        def f():
            return i * i
        fs.append(f)
        return fs

# 小结
# 一个函数可以返回一个计算结果，也可以返回一个函数。
#
# 返回一个函数时，牢记该函数并未执行，返回函数中不要引用任何可能会变化的变量

# **闭包中内部函数可以引用外部函数的参数和变量，同时也只能引用，不能改变，解决办法有二：
# a. 将要改变的变量设置为一个容器，比如列表List或字典Dict，然后通过改变元素来改变变量（文中不推荐）；
# b. 将要改变的变量声明为nonlocal变量(仅在Python3支持)，这样声明过后，就不会被认为是内部函数的局部变量，而是会到上一层函数环境中寻找这个变量。  **
